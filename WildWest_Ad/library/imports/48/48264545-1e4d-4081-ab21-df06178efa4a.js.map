{"version":3,"sources":["assets/script/LocalAssetsManager.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACM,IAAA,KAAwB,EAAE,CAAC,UAAU,EAAnC,OAAO,aAAA,EAAE,QAAQ,cAAkB,CAAC;AAG5C,IAAM,sBAAsB,GAAG,uBAAuB,CAAA;AAEtD,IAAM,UAAU,GAAG,WAAW,CAAA;AAE9B,WAAW;AACX;IAAA;IA4DA,CAAC;IAxDgB,mCAAgB,GAA7B;;;;4BAEI,qBAAM,IAAI,OAAO,CAAS,UAAC,OAAO;4BAE9B,IAAI,kBAAkB,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC,EAAE;gCACxC,OAAO,CAAC,CAAC,CAAC,CAAC;gCACX,OAAM;6BACT;4BAED,IAAI,MAAM,GAAG,EAAE,CAAC,YAAY,CAAC,MAAM,CAAC;4BACpC,IAAI,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;4BACzB,IAAI,SAAS,GAAG,CAAC,CAAC;4BAClB,MAAM,CAAC,OAAO,CAAC,UAAA,OAAO;gCAClB,SAAS,EAAE,CAAC;gCACZ,IAAI,OAAO,CAAC,IAAI,IAAI,IAAI,EAAE;oCACtB,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,GAAG,CAAC,sBAAsB,CAAC,IAAI,OAAO,CAAC,IAAI,KAAK,sBAAsB,EAAE;wCAEtG,IAAI,IAAI,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;wCAC5B,IAAI,IAAI,EAAE;4CACN,kBAAkB,CAAC,SAAS,CAAC,GAAG,CAAC,sBAAsB,EAAE,IAAI,CAAC,CAAC;yCAClE;qCACJ;oCAED,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,OAAO,CAAC,IAAI,KAAK,UAAU,EAAE;wCAE9E,IAAI,IAAI,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;wCAC5B,IAAI,IAAI,EAAE;4CACN,kBAAkB,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;yCACtD;qCACJ;iCACJ;gCAED,IAAI,SAAS,IAAI,KAAK,EAAE;oCACpB,OAAO,CAAC,CAAC,CAAC,CAAC;iCACd;4BACL,CAAC,CAAC,CAAC;wBACP,CAAC,CAAC,EAAA;;wBAlCF,SAkCE,CAAA;;;;;KACL;IAEM,gCAAa,GAApB,UAAqB,MAAgB;QACjC,yCAAyC;QACzC,sDAAsD;QACtD,sBAAsB;QACtB,iCAAiC;QACjC,0CAA0C;QAC1C,gFAAgF;QAChF,oEAAoE;QACpE,0DAA0D;QAC1D,uCAAuC;QACvC,YAAY;QACZ,QAAQ;QACR,IAAI;QAEJ,2CAA2C;QAC3C,MAAM,CAAC,MAAM,EAAE,CAAC;IACpB,CAAC;IAzDM,4BAAS,GAAqB,IAAI,GAAG,EAAE,CAAC;IA0DnD,yBAAC;CA5DD,AA4DC,IAAA;kBA5DoB,kBAAkB","file":"","sourceRoot":"/","sourcesContent":["\nconst { ccclass, property } = cc._decorator;\n\n\nconst Kdefault_sprite_splash = \"default_sprite_splash\"\n\nconst KqiuPrefab = \"qiuPrefab\"\n\n// @ccclass\nexport default class LocalAssetsManager {\n\n    static commonMap: Map<string, any> = new Map();\n\n    static async loadCommonAssets() {\n\n        await new Promise<number>((resolve) => {\n\n            if (LocalAssetsManager.commonMap.size == 2) {\n                resolve(1);\n                return\n            }\n\n            let assets = cc.assetManager.assets;\n            let count = assets.count;\n            let tempCount = 0;\n            assets.forEach(element => {\n                tempCount++;\n                if (element.name != null) { \n                    if (!LocalAssetsManager.commonMap.has(Kdefault_sprite_splash) && element.name === Kdefault_sprite_splash) {\n\n                        let uuid = element[\"_uuid\"];\n                        if (uuid) {\n                            LocalAssetsManager.commonMap.set(Kdefault_sprite_splash, uuid);\n                        }\n                    }\n\n                    if (!LocalAssetsManager.commonMap.has(KqiuPrefab) && element.name === KqiuPrefab) {\n\n                        let uuid = element[\"_uuid\"];\n                        if (uuid) {\n                            LocalAssetsManager.commonMap.set(KqiuPrefab, uuid);\n                        }\n                    } \n                } \n\n                if (tempCount == count) {\n                    resolve(1);\n                }\n            });\n        })\n    }\n    \n    static releasePrefab(prefab: cc.Asset) {\n        // LocalAssetsManager.loadCommonAssets();\n        // let deps = cc.loader.getDependsRecursively(prefab);\n        // let tempArray = [];\n        // for (const iterator of deps) {\n        //     if (typeof iterator === \"string\") {\n        //         let uuid1 = LocalAssetsManager.commonMap.get(Kdefault_sprite_splash);\n        //         let uuid2 = LocalAssetsManager.commonMap.get(KqiuPrefab);\n        //         if (iterator !== uuid1 && iterator !== uuid2) {\n        //             tempArray.push(iterator)\n        //         }\n        //     }\n        // }\n\n        // cc.assetManager.releaseAsset(tempArray);\n        prefab.decRef();   \n    } \n}\n"]}
{"version":3,"sources":["assets/script/FinalRandom/FinalRandom.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { Point } from \"./Point\";\n\n \n\nexport class FinalRandom {\n\n    /**\n     * 创建一个随机数生成器\n     */\n    public constructor(seed: number) {\n        this.seed = seed;\n        if (!this.seed && this.seed != 0) {\n            this.seed = new Date().getTime();\n        }\n    }\n    /**\n     * 设置用于随机数生成器的种子，如果不设置则实际是取当前时间毫秒数\n     */\n    private seed: number;\n    /**\n     * 返回一个随机数，在0.0～1.0之间\n     */\n    private get value(): number {\n        return this.range(0, 1);\n    }\n    /**\n     * 返回半径为1的圆内的一个随机点\n     */\n    private get insideUnitCircle(): Point {\n        var randomAngle: number = this.range(0, 360);\n        var randomDis: number = this.range(0, 1);\n        var randomX: number = randomDis * Math.cos(randomAngle * Math.PI / 180);\n        var randomY: number = randomDis * Math.sin(randomAngle * Math.PI / 180);\n        return new Point(randomX, randomY);\n    }\n    /**\n     * 返回半径为1的圆边的一个随机点\n     */\n    private get onUnitCircle(): Point {\n        var randomAngle: number = this.range(0, 360);\n        var randomX: number = Math.cos(randomAngle * Math.PI / 180);\n        var randomY: number = Math.sin(randomAngle * Math.PI / 180);\n        return new Point(randomX, randomY);\n    }\n    /**\n     * 返回一个在min和max之间的随机浮点数\n     */\n    private range(min: number, max: number): number {\n        if (!this.seed && this.seed != 0) {\n            this.seed = new Date().getTime();\n        }\n        max = max || 1;\n        min = min || 0;\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        var rnd = this.seed / 233280.0;\n        return min + rnd * (max - min);\n    }\n    /**\n     * 设置用于随机数生成器的种子，如果不设置则实际是取当前时间毫秒数\n     */\n    private static seed: number;\n    /**\n     * 返回一个随机数，在0.0～1.0之间\n     */\n    private static get value(): number {\n        return this.range(0, 1);\n    }\n    /**\n     * 返回半径为1的圆内的一个随机点\n     */\n    private static get insideUnitCircle(): Point {\n        var randomAngle: number = this.range(0, 360);\n        var randomDis: number = this.range(0, 1);\n        var randomX: number = randomDis * Math.cos(randomAngle * Math.PI / 180);\n        var randomY: number = randomDis * Math.sin(randomAngle * Math.PI / 180);\n        return new Point(randomX, randomY);\n    }\n    /**\n     * 返回半径为1的圆边的一个随机点\n     */\n    private static get onUnitCircle(): Point {\n        var randomAngle: number = this.range(0, 360);\n        var randomX: number = Math.cos(randomAngle * Math.PI / 180);\n        var randomY: number = Math.sin(randomAngle * Math.PI / 180);\n        return new Point(randomX, randomY);\n    }\n    /**\n     * 返回一个在min和max之间的随机浮点数\n     */\n    private static range(min: number, max: number): number {\n        if (!this.seed && this.seed != 0) {\n            this.seed = new Date().getTime();\n        }\n        max = max || 1;\n        min = min || 0;\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        var rnd = this.seed / 233280.0;\n        return min + rnd * (max - min);\n    }\n\n\n\n\n    \n    /**\n     * 返回一个在[0,max)之间的整数\n     * @param max \n     */\n    public static RandInt(max: number): number {\n        return Math.floor(FinalRandom.range(0, max));\n    }\n\n\n    /**\n     * 返回一个在[min,max)之间的整数\n     * @param min \n     * @param max \n     */\n    public static RandIntBetween(min: number, max: number) {\n        return Math.floor(FinalRandom.range(min, max));\n    }\n\n    /**\n     * 返回一个在[0，max)之间的浮点数\n     * @param max 最大数\n     */\n    public static RandFloat(max: number): number {\n        return FinalRandom.range(0, max);\n    }\n\n    /**\n     * 返回一个在[min,max)之间的浮点数\n     * @param min \n     * @param max \n     */\n    public static RandFloatBetween(min: number, max: number): number {\n        return FinalRandom.range(min, max);\n    }\n\n}\n"]}
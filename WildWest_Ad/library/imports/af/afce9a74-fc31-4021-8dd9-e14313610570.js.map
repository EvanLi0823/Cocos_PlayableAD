{"version":3,"sources":["assets/script/qiuScript/qiuCollisionScript.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["// import boomScript from \"../boomScript\"; \n// import JsbSdkScript from \"../PlatformInteraction/JsbSdkScript\";\n// import tireSteakScript from \"../tireSteakScript\";\n// import GameManager from \"./GameManager\";\n// import qiuMoveScript from \"./qiuMoveScript\";\n\n// const { ccclass, property } = cc._decorator;\n\n// export type QiuInfo = {\n//     index: number,\n//     pos: cc.Vec2,\n//     speed: cc.Vec2\n//     rigidBodyType: cc.RigidBodyType\n// }\n\n// @ccclass\n// export default class qiuCollisionScript extends cc.Component {\n\n//     @property(cc.Prefab)\n//     sparkPrefab: cc.Prefab = null;\n\n//     @property(cc.Sprite)\n//     qiuSprite: cc.Sprite = null;\n\n//     @property(cc.Sprite)\n//     txtSprite: cc.Sprite = null;\n\n//     @property([cc.SpriteFrame])\n//     qiuSpriteFrameArray: Array<cc.SpriteFrame> = [];\n\n//     @property([cc.SpriteFrame])\n//     txtSpriteFrameArray: Array<cc.SpriteFrame> = [];\n\n//     @property(cc.Prefab)\n//     scorePrefab: cc.Prefab = null;\n\n//     @property(cc.Prefab)\n//     mergeBoomPrefab:cc.Prefab = null;\n\n//     targetNode:cc.Node = null\n\n//     leftNode:cc.Node = null\n\n//     redbag:cc.Node = null\n\n\n//     scoreNode: cc.Node = null;\n\n//     perpetualAttackCount = 0;\n\n//     get qiuInfo(): QiuInfo {\n//         let rType = this.node.getComponent(cc.RigidBody).type;\n//         let velocity = cc.v2(0, 0)\n//         if (rType == cc.RigidBodyType.Dynamic) {\n//             velocity = this.node.getComponent(cc.RigidBody).linearVelocity\n//         }\n\n//         let info: QiuInfo = {\n//             index: this.index,\n//             pos: this.node.getPosition(),\n//             speed: velocity,\n//             rigidBodyType: rType\n//         }\n//         return info\n//     }\n\n//     private _isDeath: boolean = false;\n//     set isDeath(isDeath: boolean) {\n//         this._isDeath = isDeath;\n//         if (isDeath) {\n//             this.node.getComponent(cc.PhysicsCircleCollider).radius = 0;\n//             this.node.getComponent(cc.PhysicsCircleCollider).apply();\n//         }\n//     }\n\n//     get isDeath() {\n//         return this._isDeath;\n//     }\n\n    \n//     tween: cc.Tween = null;\n\n//     paTween: cc.Tween = null;\n\n//     scaleTween: cc.Tween = null;\n\n//     isspark = false;\n\n//     collisionTime: number = 0;\n//     collisionPoint: cc.Vec2 = null;\n\n\n//     gameOver() {\n//         this._isDeath = true; \n//     }\n\n//     private _index: number;\n//     public get index() {\n//         return this._index;\n//     }\n\n//     public set index(index: number) {\n//         this._index = index;\n//         if (index > 10) {\n//             return\n//         }\n\n//         this.qiuSprite.spriteFrame = this.qiuSpriteFrameArray[index];\n//         this.txtSprite.spriteFrame = this.txtSpriteFrameArray[index];\n\n//         let moiveScript = this.getComponent(qiuMoveScript);\n//         if (cc.isValid(moiveScript, true)) {\n//             moiveScript.lightyNode.height = this.qiuSprite.node.height;\n//             moiveScript.lightyNode.width = 214 * this.qiuSprite.node.height * 1.0 / 83;\n//         }\n\n//         this.node.width = this.qiuSprite.node.width;\n//         this.node.height = this.qiuSprite.node.height;\n//     }\n\n//     levelUp() {\n//         let oriWidth = this.node.width;\n\n//         this.index++;\n//         if (this.index == 9){\n//             JsbSdkScript.buryPoint(\"debug_1024_done\",\"\")\n//         }else if(this.index == 10){\n//             JsbSdkScript.buryPoint(\"debug_2048_done\",\"\")\n//         }\n\n//         let width = this.node.width;\n\n//         this.node.scale = oriWidth * 1.0 / width;\n//         this.getComponent(cc.PhysicsCircleCollider).radius = oriWidth / 2 - 1;\n//         this.getComponent(cc.PhysicsCircleCollider).apply();\n\n//         if (cc.isValid(this.scaleTween, true)) {\n//             this.scaleTween.stop();\n//         }\n//         this.scaleTween = cc.tween(this.node)\n//             .parallel(\n//                 cc.tween().delay(0.1)\n//                     .call(() => {\n//                         this.getComponent(cc.PhysicsCircleCollider).radius = width / 2 - 1;\n//                         this.getComponent(cc.PhysicsCircleCollider).apply();\n\n//                         this.isDeath = false;\n//                     }),\n//                 cc.tween(this.node)\n//                     .to(0.15, { scale: 1.15 })\n//                     .to(0.3, { scale: 1.0 })\n//             )\n//             // .to(0.18, { scale: 1})\n//             .start()\n\n//         let qiuNode = this.node.getChildByName(\"qiu\");\n//         let qiuZindex = qiuNode.zIndex;\n//         let txtNode = this.node.getChildByName(\"txt\");\n\n//         if (cc.isValid(this.tween, true)) {\n//             this.tween.stop();\n//         }\n\n//         txtNode.zIndex = qiuNode.zIndex + 1;\n//         txtNode.setPosition(cc.v2(0, 0));\n//         txtNode.scale = 1.0;\n\n//         let rate = 1.0;\n//         for (let i = 0; i < this.index; i++) {\n//             rate *= 0.9;\n//         }\n//         let scale = this.node.width * rate / 80.0;\n\n//         this.tween = cc.tween(txtNode)\n//             .delay(0.1)\n//             .to(0.15 * scale, { position: cc.v3(this.node.width / 2, 0, 0), scaleX: 0.0, scaleY: 0.7 })\n//             .call(() => {\n//                 txtNode.zIndex = qiuZindex - 1;\n//             })\n//             .to(0.2 * scale, { position: cc.v3(-this.node.width / 2, 0, 0), scaleX: 0.0, scaleY: 0.7 })\n//             .call(() => {\n//                 txtNode.zIndex = qiuZindex + 1;\n//             })\n//             .to(0.1 * scale, { position: cc.v3(0, 0, 0), scaleX: 1.0, scaleY: 1.0, skewY: 0 })\n//             .to(0.1 * scale, { position: cc.v3(this.node.width / 2, 0, 0), scaleX: 0.0, scaleY: 0.7 })\n//             .call(() => {\n//                 txtNode.zIndex = qiuZindex - 1;\n//             })\n//             .to(0.2 * scale, { position: cc.v3(-this.node.width / 2, 0, 0), scaleX: 0.0, scaleY: 0.7 })\n//             .call(() => {\n//                 txtNode.zIndex = qiuZindex + 1;\n//             })\n//             .to(0.1 * scale, { position: cc.v3(0, 0, 0), scaleX: 1.0, scaleY: 1.0 })\n//             .start()\n//     }\n\n//     initData(index) {\n//         // this.currentIndex = index;\n//         this.index = index;\n\n//         this.getComponent(cc.PhysicsCircleCollider).radius = this.node.height / 2 - 1;\n//         this.getComponent(cc.PhysicsCircleCollider).apply();\n//     }\n\n//     // protected onDestroy(): void {\n//     //     console.log(`qiuCollisionScript onDestroy`);\n\n//     // }\n//     onLoad () {\n//         this.targetNode = cc.find(\"Canvas/gameNode/gameLayer/UpRewardNode/moneyID/label\");\n//         this.leftNode = cc.find(\"Canvas/leftNode/label\");\n//     }\n\n//     start() {\n\n//     }\n\n//     // update (dt) {}\n\n//     onBeginContact(contact: cc.PhysicsContact, selfConllider, otherCollider) {\n\n//         if (otherCollider.node.group == \"floor\" || otherCollider.node.group == \"qiuqiu\") {\n        \n//             // if(cc.isValid(GameManager.Instance.tempQiu,true) && cc.isValid(this.node , true) ) {\n//             //     // if(GameManager.Instance.tempQiu.name != null && this.node.name != null) {\n//             //         if( GameManager.Instance.tempQiu.name === this.node.name) {  \n                       \n//             //             GameManager.Instance.tempQiu = null; \n//             //         }\n//             //     // }\n//             // }\n            \n\n//             let com1: qiuMoveScript = selfConllider.getComponent(qiuMoveScript);\n//             if (cc.isValid(com1, true)) {\n//                 com1.isCollsion = true;\n//                 GameManager.Instance.resetCounting();  \n//             }\n\n//             // let com2: qiuMoveScript = otherCollider.getComponent(qiuMoveScript);\n//             // if (cc.isValid(com2, true)) {\n//             //     com2.isCollsion = true;\n//             // }\n\n//         }\n//         if (selfConllider.node.group == \"qiuqiu\" && otherCollider.node.group == \"qiuqiu\") { \n//             if(GameManager.Instance.isOver) {\n//                 return\n//             }\n//             if (cc.isValid(GameManager.Instance.targetQiu, true)) {\n//                 if (GameManager.Instance.targetQiu == selfConllider.node) {\n//                     if (GameManager.Instance.targetQiu.getComponent(cc.RigidBody).type == cc.RigidBodyType.Static) {\n//                         GameManager.Instance.gameOver()\n//                         return\n//                     } \n//                 }\n//             }\n\n//             if (selfConllider.node.y < otherCollider.node.y) {\n//                 return\n//             }\n\n//             let selfIndex = this.index;\n//             let otherCollisionScript: qiuCollisionScript = otherCollider.getComponent(qiuCollisionScript);\n//             let otherIndex = otherCollisionScript.index;\n\n//             let selfDeath = this.isDeath;\n//             let otherDeath = otherCollisionScript.isDeath;\n\n//             // 融合\n//             if (!selfDeath && !otherDeath && selfIndex == otherIndex) {\n//                 if (this.index >= 10) {\n//                     return\n//                 }\n//                 otherCollisionScript.isDeath = true;\n//                 this.getComponent(qiuCollisionScript).isDeath = true;\n\n//                 let pos1 = this.node.getPosition();\n//                 let pos2 = otherCollider.node.getPosition();\n//                 let pos = cc.v3(pos1.x + (pos2.x - pos1.x) * 9 / 10, pos1.y + (pos2.y - pos1.y) * 9 / 10, 0);\n//                 // let pos = cc.v3(pos2.x ,  pos2.y , 0); \n                 \n//                         // let boomNode = cc.instantiate(this.mergeBoomPrefab);\n//                         // boomNode.getComponent(boomScript).targetRadius = this.node.width;\n//                         // boomNode.getComponent(boomScript).index = this.index;\n\n//                         // boomNode.setPosition(pos);\n//                         // this.node.parent.addChild(boomNode);\n//                 this.playBoomAnimation(pos);\n//                 cc.resources.load(\"prefab/redbagPrefab\", cc.Prefab, (err, res) => {\n//                     if (res){\n//                         this.redbag = cc.instantiate(res as unknown as cc.Prefab);\n//                         this.redbag.setPosition(this.node.getPosition())\n//                         cc.find(\"Canvas\").addChild(this.redbag);\n\n//                         let targetNode\n\n//                         if (cc.view.getFrameSize().width > cc.view.getFrameSize().height){\n//                             targetNode = this.leftNode\n//                         }else{\n//                             targetNode = this.targetNode\n//                         }\n//                         let tartgetPos = targetNode.convertToWorldSpaceAR(cc.v2(0, 0));\n//                         let pos1 = this.redbag.convertToNodeSpaceAR(tartgetPos);\n//                         let pos = cc.v2(pos1.x + targetNode.width / 2, pos1.y);\n//                         cc.tween(this.redbag)\n//                             .bezierBy(1.0, cc.v2(pos.x / 4, 500), cc.v2(pos.x * 3 / 4, 500), pos)\n//                             .to(0.1, { opacity: 0 })\n//                             .start()\n\n//                     }\n//                 })\n                \n\n//                 if (cc.isValid(this.scoreNode, true) && cc.isValid(otherCollisionScript.scoreNode, true)) {\n//                     this.scoreNode.getComponent(tireSteakScript).score += otherCollisionScript.scoreNode.getComponent(tireSteakScript).score;\n//                     otherCollisionScript.scoreNode.destroy()\n//                 }\n//                 else if (cc.isValid(this.scoreNode, true) == false) {\n//                     if (cc.isValid(otherCollisionScript.scoreNode, true)) {\n//                         this.scoreNode = otherCollisionScript.scoreNode;\n//                     }\n//                     else {\n//                         this.scoreNode = cc.instantiate(this.scorePrefab);\n//                         GameManager.Instance.displayNode.addChild(this.scoreNode);\n//                     }\n//                 }\n//                 this.scoreNode.getComponent(tireSteakScript).score += (this.index + 1);\n//                 this.scoreNode.setPosition(pos2);\n\n//                 GameManager.Instance.synthesizeQiu(this.index + 1, pos, otherCollider.node, this.node);\n\n//                 let otherPaCount = otherCollider.getComponent(qiuCollisionScript).perpetualAttackCount;\n\n//                 let selfPaCount = selfConllider.getComponent(qiuCollisionScript).perpetualAttackCount;\n\n//                 let maxCount = Math.max(otherPaCount, selfPaCount)\n//                 selfConllider.getComponent(qiuCollisionScript).perpetualAttackCount = maxCount + 1;\n\n\n//                 if (cc.isValid(this.paTween, true)) {\n//                     this.paTween.stop();\n//                 }\n//                 this.paTween = cc.tween(selfConllider.node)\n//                     .delay(0.7)\n//                     .call(() => {\n//                         let selfPaCount = selfConllider.getComponent(qiuCollisionScript).perpetualAttackCount; \n\n//                         selfConllider.getComponent(qiuCollisionScript).perpetualAttackCount = 0;\n\n//                         if (cc.isValid(this.scoreNode, true)) {\n//                             this.scoreNode.getComponent(tireSteakScript).action();\n//                             this.scoreNode = null;\n//                         }\n//                     })\n//                     .start();\n\n\n//                 let time = 0.1;\n//                 for (let i = 0; i < this.index; i++) {\n//                     time *= 1.1;\n//                 }\n//                 // console.log(`merget time ${this.index} | ${time}`);\n\n//                 cc.tween(otherCollider.node)\n//                     .to(time, { position: pos, scale: 0 })\n//                     .call(() => {\n//                         otherCollider.node.destroy();\n//                     })\n//                     .start();\n\n//                 cc.tween(this.node)\n//                     .to(time, { position: pos })\n//                     .call(() => {\n//                         if (cc.isValid(selfConllider.node, true) && this.index == otherIndex) {\n//                             this.levelUp();\n//                         }\n//                     })\n//                     .start();\n//             }\n//             else if (selfIndex != otherIndex) {\n//                 this.isspark = true;\n//             }\n//         }\n//     }\n//     playBoomAnimation(pos)\n//     {\n//         let boomNode = cc.instantiate(this.mergeBoomPrefab);\n//         boomNode.getComponent(boomScript).targetRadius = this.node.width;\n//         boomNode.getComponent(boomScript).index = this.index;\n//         boomNode.setPosition(pos);\n//         this.node.parent.addChild(boomNode);\n//     }\n//     onEndContact(contact: cc.PhysicsContact, selfCollider: cc.PhysicsCollider, otherCollider: cc.PhysicsCollider): void {\n//         if (selfCollider.node.group == \"qiuqiu\" && otherCollider.node.group == \"qiuqiu\") {\n//             if (selfCollider.node.y < otherCollider.node.y) {\n//                 return\n//             }\n//             if (this.isspark) {\n//                 this.isspark = false;\n//             }\n//         }\n//     }\n\n//     onPostSolve(contact: cc.PhysicsContact, selfConllider, otherCollider) {\n//         if (selfConllider.node.group == \"qiuqiu\" && otherCollider.node.group == \"qiuqiu\") {\n//             if (selfConllider.node.y < otherCollider.node.y) {\n//                 return;\n//             }\n\n//             if (!this.isspark) {\n//                 return;\n//             }\n//             let selfIndex = this.index;\n//             let otherIndex = otherCollider.getComponent(qiuCollisionScript).index;\n//             if (selfIndex != otherIndex) {\n\n//                 let manifoldPoints: Array<cc.ManifoldPoint> = contact.getManifold().points;\n//                 if (manifoldPoints != null && manifoldPoints.length > 0) {\n//                     let manifoldPoint = manifoldPoints[0];\n\n\n//                     if (Math.abs(manifoldPoint.normalImpulse) >= 8000 || (Math.abs(manifoldPoint.tangentImpulse) >= 8000)) {\n//                         // if ((Math.pow(manifoldPoint.normalImpulse , 2) + Math.pow(manifoldPoint.tangentImpulse , 2)) > 500000000) {\n//                         // console.log(`onPostSolve ${selfIndex} | ${otherIndex}`);\n\n//                         let worldPoints = contact.getWorldManifold().points;\n//                         if (worldPoints != null && worldPoints.length > 0) {\n//                             let nowTime = (new Date()).getTime();\n//                             if (this.collisionTime > 0 && Math.abs(this.collisionTime - nowTime) < 2000) {\n//                                 return\n//                             }\n//                             let point = worldPoints[0];\n//                             let point1 = this.node.parent.convertToNodeSpaceAR(point);\n\n\n//                             // console.log(`worldPoints ${point1}`);\n//                             if (!(this.collisionPoint && Math.abs(this.collisionPoint.x - point1.x) < 20 && Math.abs(this.collisionPoint.y - point1.y) < 20)) {\n//                                 // console.log(`worldPoints ${point1}  | ${nowTime}  |  ${this.collisionTime} | ${Math.pow(manifoldPoint.normalImpulse, 2) + Math.pow(manifoldPoint.tangentImpulse, 2)}`);\n\n//                                 let sparkNode = cc.instantiate(this.sparkPrefab);\n//                                 sparkNode.setPosition(point1);\n//                                 this.node.parent.addChild(sparkNode);\n//                             }\n//                             this.collisionPoint = point1;\n//                             this.collisionTime = nowTime;\n\n//                         }\n//                         // console.log(`manifoldPoint: ${manifoldPoint.normalImpulse} | ${manifoldPoint.tangentImpulse}`);\n//                     }\n//                 }\n//             }\n//         }\n//     }\n// }\n"]}